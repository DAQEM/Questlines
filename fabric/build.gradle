plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id "com.matthewprenger.cursegradle" version "1.4.0"
    id "com.modrinth.minotaur" version "2.+"
}

architectury {
    platformSetupLoomIde()
    fabric()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"
    // Remove the next line if you don't want to depend on the API
    modApi "dev.architectury:architectury-fabric:${rootProject.architectury_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }

    modImplementation "curse.maven:supermartijn642s-config-lib-438332:${project.config_library_file_fabric}"
    modImplementation "curse.maven:arc-883593:${project.arc_file_fabric}"
    modImplementation "curse.maven:ui-933200:${project.ui_library_file_fabric}"
}

processResources {
    inputs.property "version", project.version
    inputs.property "minecraft_version", rootProject.minecraft_version
    inputs.property "architectury_version", rootProject.architectury_version
    inputs.property "config_library_version", rootProject.config_library_version
    inputs.property "arc_version", rootProject.arc_version
    inputs.property "ui_library_version", rootProject.ui_library_version

    filesMatching("fabric.mod.json") {
        expand([
                "version": project.version,
                "minecraft_version": rootProject.minecraft_version,
                "architectury_version": rootProject.architectury_version,
                "config_library_version": rootProject.config_library_version,
                "arc_version": rootProject.arc_version,
                "ui_library_version": rootProject.ui_library_version
        ])
    }
}

shadowJar {
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "fabric-dev-shadow"
}

remapJar {
    injectAccessWidener = true
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier = "fabric"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

remapSourcesJar {
    archiveClassifier = "fabric-sources"
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenFabric(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}

curseforge {
    apiKey = System.getenv("CURSEFORGE_API_KEY")
    project {
        id = rootProject.curse_forge_project_id
        releaseType = rootProject.release_type
        changelogType = "markdown"
        changelog = rootProject.file('changelog.md')
        addGameVersion "$rootProject.minecraft_version"
        addGameVersion "Java 17"
        addGameVersion "Fabric"

        relations {
            requiredDependency("architectury-api")
            requiredDependency("supermartijn642s-config-lib")
            requiredDependency("ui")
            requiredDependency("arc")
        }

        mainArtifact(remapJar) {
            displayName = "Questlines Fabric $rootProject.minecraft_version - $rootProject.mod_version"
        }

        addArtifact(remapSourcesJar) {
        }
    }
}

modrinth {
    token = System.getenv("MODRINTH_API_KEY")
    projectId = rootProject.modrinth_project_id
    versionName = "Questlines Fabric $rootProject.minecraft_version - $rootProject.mod_version"
    versionNumber = "$rootProject.mod_version"
    versionType = "$rootProject.release_type"
    uploadFile = remapJar
    additionalFiles = [remapSourcesJar]
    gameVersions = ["$rootProject.minecraft_version"]
    loaders = ["fabric"]
    changelog = rootProject.file('changelog.md').text
    dependencies {
        required.project "architectury-api"
        required.project "ui-lib"
        required.project "arc"
    }
}